// Generated by CoffeeScript 2.3.2
(function() {
  var _, fs, mkdirp, nunjucks, nunjucksBrunchPlugin, path;

  nunjucks = require('nunjucks');

  fs = require('fs');

  path = require('path');

  mkdirp = require('mkdirp');

  _ = require('lodash');

  module.exports = nunjucksBrunchPlugin = (function() {
    class nunjucksBrunchPlugin {
      constructor(config) {
        this.config = config;
        this.configure();
      }

      configure() {
        var options, ref, ref1, ref2;
        if (((ref = this.config.plugins) != null ? ref.nunjucks : void 0) != null) {
          options = ((ref1 = this.config) != null ? (ref2 = ref1.plugins) != null ? ref2.nunjucks : void 0 : void 0) || this.config.plugins.nunjucks;
        } else {
          options = {};
        }
        if (options.filePatterns != null) {
          this.filePatterns = options.filePatterns;
        }
        if (options.templatePath != null) {
          this.templatePath = options.templatePath;
        }
        if (options.path != null) {
          this.publicPath = options.path;
        }
        return this.nunjucksOptions = _.omit(options, 'filePatterns', 'path');
      }

      templateFactory(templatePath, options, callback) {
        var e, env, error, template;
        try {
          env = new nunjucks.Environment(new nunjucks.FileSystemLoader(path.dirname(templatePath)));
          template = env.render(options.filename, options);
        } catch (error1) {
          e = error1;
          error = e;
        }
        return callback(error, template);
      }

      compile(data, originalPath, callback) {
        var options, relativePath, successHandler, templatePath;
        // I am avoiding the use of the data variable. Using the file path
        // lets the template compile correctly when referencing other templates.
        templatePath = path.resolve(originalPath);
        relativePath = path.relative(this.projectPath, templatePath);
        options = _.extend({}, this.nunjucksOptions);
        if (options.filename == null) {
          options.filename = path.basename(relativePath);
        }
        successHandler = (error, template) => {
          var outputDirectory, outputPath, publicPath;
          if (error != null) {
            callback(error);
            return;
          }
          if (relativePath.length) {
            publicPath = path.join(this.projectPath, this.publicPath);
            outputPath = relativePath.replace(this.templatePath, '');
            outputPath = path.join(publicPath, outputPath);
            outputDirectory = path.dirname(outputPath);
            // TODO: Save this block from an eternity in callback hell.
            return mkdirp(outputDirectory, function(err) {
              if (err) {
                return callback(err, null);
              } else {
                return fs.writeFile(outputPath, template, function(err, written, buffer) {
                  if (err) {
                    return callback(err, null);
                  } else {
                    return callback();
                  }
                });
              }
            });
          } else {
            return callback(null, `module.exports = ${template};`);
          }
        };
        return this.templateFactory(templatePath, options, successHandler);
      }

    };

    nunjucksBrunchPlugin.prototype.brunchPlugin = true;

    nunjucksBrunchPlugin.prototype.type = 'template';

    nunjucksBrunchPlugin.prototype.extension = 'html';

    nunjucksBrunchPlugin.prototype.nunjucksOptions = {};

    nunjucksBrunchPlugin.prototype.publicPath = 'public';

    nunjucksBrunchPlugin.prototype.templatePath = 'app/views';

    nunjucksBrunchPlugin.prototype.projectPath = path.resolve(process.cwd());

    nunjucksBrunchPlugin.prototype.filePatterns = /^app(\/|\\)views(\/|\\).*.html$/;

    return nunjucksBrunchPlugin;

  }).call(this);

}).call(this);
